;; Compilation d'op√©rateurs de comparaison.

(defun compilation-comp (exp env fenv nomf)
  (let ((op (car exp))
	(fin (gensym "finTest")))
    (append (compilation (cadr exp) env fenv nomf)
	    (compilation (caddr exp) env fenv nomf)
	    (case op
	      ('= (list "if_icmpeq recursivecall"))
	      ('< (list "if_icmpge recursivecall"))
	      ('> (list "if_icmple recursivecall"))
	      ('<= (list "if_icmpgt recursivecall"))
	      ('>= (list "if_icmplt recursivecall"))
	      )
	    (list "ireturn"))
    )
  )

(defun compilation-and (exp etiqfin env fenv nomf)
  (if (null exp)
      (append '((MOVE (:DIESE T) :R0)) `((@ ,etiqfin)))
    (append (compilation (car exp) env fenv nomf)
	    '((CMP :R0 (:DIESE T)))
	    `((JNE (@ ,etiqfin)))
	    (compilation-and (cdr exp) etiqfin env fenv nomf))
    )
  )

(defun compilation-or (exp etiqfin env fenv nomf)
  (if (null exp)
      (append '((MOVE (:DIESE NIL) :R0)) `((@ ,etiqfin)))
    (append (compilation (car exp) env fenv nomf)
	    '((CMP :R0 (:DIESE T)))
	    `((JEQ (@ ,etiqfin)))
	    (compilation-or (cdr exp) etiqfin env fenv nomf))
    )
  )
