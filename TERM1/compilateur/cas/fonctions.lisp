;; Compilation de fonctions.

(defun list-to-string (lst)
  (format nil "~{~A~}" lst))

(defun concatString (list)
  (if (listp list)
    (with-output-to-string (s)
      (dolist (item list)
        (if (stringp item)
          (format s "~a" item)
        )
      )
    )
  )
)

(defun compilation-defun (exp env fenv nomf)
  (let ((nivem (assoc nomf fenv)))
    (append
    (list (concatenate 'string ".class public " (string-capitalize (car exp))))
    (list ".super java/lang/Object" )
    (list (append '(.method public static) () (list (car exp)) '((I)I)))
    '((.limit local 1))
    '((.limit stack 3))
    '(iload 0)
    (compilation-progn (cddr exp)
		       (param-env (cadr exp) env 1 (if nivem (+ 1 (cadr nivem)) 0))
		       (fun-env (list exp) fenv (if nivem (+ 1 (cadr nivem)) 0))
		       (car exp))
    '((ireturn))
    '((.end method))
    '((method public static print(I)V))
    '((.limit local 1))
    '((.limit stack 2)=
    '((getstatic java/lang/System.out Ljava/io/PrintStream";"))
    '(iload 0)
    '(invokevirtual java/io/PrintStream/println(I)V)
    '(return)
    '(.end method)
    '(.method public static main("["Ljava/lang/String";")V)
    '(.limit locals 1)
    '(.limit stack 1)
    '(ldc 10)
    '(invokestatic)
    (list (car exp))
    '(/)
    (list (car exp))
    '((I)I)
    '(invokestatic)
    (list (car exp))
    '(/)
    '(print(I)V)
    '(return)
    '(.end method))
    )
  )
)

(defun param-env (exp env dep nivem)
    ()
  )

(defun fun-env (exp fenv nivem)
  (if (atom exp)
      fenv
    (fun-env (cdr exp) (cons `(,(caar exp) ,nivem) fenv) nivem)
    )
  )

(defun compilation-appel (exp env fenv nomf)
  (concatenate 'string
    (compilation-param (cdr exp) env fenv nomf)
    " getstatic java/lang/System/out Ljava/io/PrintStream;"
    " ldc \'"
    (car exp)
    "\' invokevirtual java/io/PrintStream/println(Ljava/lang/String;)V"
  )
)

(defun compilation-param (exp env fenv nomf)
  (if (atom exp)
      ()
    (concatenate 'string
      (compilation (car exp) env fenv nomf)
	    (compilation-param (cdr exp) env fenv nomf))
    )
  )

(defun compilation-lambda (exp env fenv nomf)
  (let ((lambdaexpr (gensym "lambdaexpr"))
	(n (length (cdr exp)))
	(nivem (assoc nomf fenv)))
    (append (compilation-param (cdr exp) env fenv nomf)
	    `((PUSH (:DIESE ,n)))
	    `((MOVE :FP :R1))
	    `((MOVE :SP :FP))
	    `((MOVE :SP :R2))
	    `((SUB  (:DIESE ,n) :R2))
	    `((SUB  (:DIESE 1) :R2))
	    `((PUSH :R2))
	    `((PUSH :R1))
	    (if nivem  `((PUSH (:DIESE ,(+ 1 (cadr nivem)))))  `((PUSH (:DIESE ,0))))
	    `((PUSH (:DIESE 0)))
	    (compilation (caddar exp)
			 (param-env (cadar exp) env 1 (if nivem   (+ 1 (cadr nivem)) 0))
			 (fun-env  (list (cons lambdaexpr (cdar exp))) fenv (if nivem (+ 1 (cadr nivem)) 0))
			 lambdaexpr)
	    `((MOVE ( 1 :FP) :SP))
	    `((MOVE ( 2 :FP) :FP)))
    )
  )
